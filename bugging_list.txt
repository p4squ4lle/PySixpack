- serial.flush(): ich hab jetzt erstmal ser.reset_output_buffer() und ser.reset_input_buffer() in
  send_cmd/request reingeschrieben; (vgl. ser.flush() in smaract communication.py);
  müsste man evtl nochmal testen ob dadurch probleme aufkommen beim senden oder empfangen von queries

- action_dict implementieren (für befehl get_pos() und get_vel())

- vielleicht ist es besser alle hex umwandlungen der fkt encode_param zu überlassen
  (z.b. in set_peak_current() oder stop_motors())

- encode_param(): parameter in integer umwandeln

- get_unit_info(): resp_addr nicht in hex umwandeln, einfach den string rein formatieren oder davor umwandeln
                   mit encode_param?!
                   die seriennr auf dem gerät oder in der anleitung nachsehen um zu überprüfen ob
                   man nur die 2 reply bytes (p3 p4)  oder alle vier letzten hernhemen muss (p3 - p6)


- resp_addr: entweder als string lassen und dann ohne umwandlung (z.b. bei get_unit_info()) oder
  als Zahl und dann mit Umwandlung (encode_param())

- um serial port zu öffnen muss spyder mit admin rechten (sudo) gestartet werden

- nachsehen wie die DIP-Switches eingestellt sind

- im windows programm nachsehen: ref_search_params(): wie werden die debounce times übermittelt?
                                 befehle von 7.3 additional inputs / outputs


- sixback_controller.py: send_request:
    - funktioniert self.ser.read(9) oder kann man das auch mit 'while self.ser.in_waiting(): [..]' lösen?
      vlt gehts auch mit self.ser.readline()

- set_add_outputs(): kann man über die argumente der funktion iterieren (irgendwie so: format(*args))

- bei der initialisierung der seriellen schnittstelle kann man auch ein dictonary für die parameter benutzen:
  apply_settings(dict)

- fct. ref_search_params(): die Bedingung, dass alle motoren stehen sollten, bevor die parameter geändert werden,
                            sollte im code implementiert werden

- constants.py:
  - ich denke es wäre nicht schlecht im constants modul auch funktionen zu haben die Antwortbytes
    in aussagekräftige meldungen umcodieren


- ser.read() liest ein byte ausm puffer


smaract:

  - communication.py file:
    - @comm_error_handler; how can i implement this?
    - socketCom; ist das für windows?
    - class SerialCom erbt von Serial und kann daher einfach deren Funktionen übernehmen (write, reakline, ...)

  - axis.py:
    - what is weakref? 'import weakref'
