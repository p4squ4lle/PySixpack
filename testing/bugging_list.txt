- auprobieren ob das programm auch mit python 2.7 läuft

- status dict sollte motor0 - motor5 haben nicht motor1 bis motor6, nachsehen ob bei den fkt
die das status dict beschreiben richtig parametriesiert wurde!

- bei __del__() wirklich die ctrl variable freigeben

- constants modul nicht als c importieren sondern mit * 

- query_all : rotation mit velocity angeben; evlt im status_dict auch velocity und pos angeben.

- read_input_channels scheint mit beliebiger channelno eine antwort zu liefern, aber ab channelno=8
 immer das gleiche ergebnis: ('channelno', 64, 0, 192, 0)

- self.send_command und send_request verschleiern -> _send_command
mglw. auch noch andere variablen verschleiern: last_request usw.

- check param range nich so umständlich machen!!

- in motor.py alle motnos durch self._motno ersetzen!

- gibt es einen query befehl der die anzahl der Motoren ausgibt? vlt. query_all_motor_activities()?
  query all motors gibt inactive für jeden motor zurück obwohl nur ein motor angeschl. ist.

- query_all_motor_activities braucht eventuell länger wenn delayed response gefordert wird -
  vielleicht passt das schon mit timeout=None? wartet er da unendlich lang auf Antwort?

- welchen action wert gibt der controller für reference search zurück: 20-29? oder nur 20 & 29?

- das mit dem last_command/request funktioniert nicht (wird nicht zurückgegeben), oder doch aber nur mit einer Klasse?

- maybe remove all ValueErrors and define own exception? (InputError)

- get_unit_info(): die seriennr auf dem gerät oder in der anleitung nachsehen um zu überprüfen ob
                   man nur die 2 reply bytes (p3 p4) oder alle vier letzten hernehmen muss (p3 - p6)

- nachsehen wie die DIP-Switches eingestellt sind (an der hardware)

- set_add_outputs(): kann man über die argumente der funktion iterieren (irgendwie so: format(*args))

- Serial exceptions mit einbauen?

- fct. ref_search_params(): wie lange dauert die auswertung eines befehls (hier: query_all_motor_activities())

- constants.py:
  - ich denke es wäre nicht schlecht im constants modul auch funktionen zu haben die Antwortbytes
    in aussagekräftige meldungen umcodieren
  - in encode_param: check_paramrange implementieren

- serial.flush(): ich hab jetzt erstmal ser.reset_output_buffer() und ser.reset_input_buffer() in
  send_cmd/request reingeschrieben; (vgl. ser.flush() in smaract communication.py);
  müsste man evtl nochmal testen ob dadurch probleme aufkommen beim senden oder empfangen von queries

- um serial port zu öffnen muss spyder mit admin rechten (sudo) gestartet werden

smaract:

  - communication.py file:
    - @comm_error_handler; how can i implement this?
    - class SerialCom erbt von Serial und kann daher einfach deren Funktionen übernehmen (write, reakline, ...)
